{
  "repo": {
    "root": ".",
    "languages": ["py", "js", "html"],
    "entry_points": [
      {"path": "src/satdist/cli.py", "type": "module", "function": "satdist.cli:main"},
      {"path": "server.js", "type": "script", "function": "node server.js"},
      {"path": "addresses_to_satellite.py", "type": "script", "function": "main"},
      {"path": "fetch_satellite_bbox.py", "type": "script", "function": "main"},
      {"path": "plot_bbox.py", "type": "script", "function": "(example)"}
    ],
    "dependencies": {
      "python": ["requests", "Pillow", "folium"],
      "node": ["express", "helmet", "cors", "compression", "express-rate-limit", "morgan", "dotenv", "localtunnel"],
      "other": []
    }
  },
  "dataflow": {
    "addresses_to_geocode": {"file": "addresses_to_satellite.py", "function": "read_addresses, geocode_address", "notes": "Uses Nominatim-compatible /search with polygon_geojson=1; 1.1s throttle."},
    "geocode_to_overpass": {"file": "addresses_to_satellite.py", "function": "(missing in batch)", "notes": "No Overpass building query in Python; server.js uses Overpass only for nearby roads."},
    "polygon_to_bbox": {"file": "addresses_to_satellite.py", "function": "bbox_from_geojson, normalize_bbox", "notes": "Pads bbox in degrees via pad_bbox; 10% in meters (EPSG:3857) not implemented."},
    "imagery_fetch": {"file": "src/satdist/fetch.py", "function": "save_satellite_bbox -> fetch_satellite_bbox", "sources": ["USGS_NAIP", "EOX_S2"], "notes": "Currently fetches Esri World_Imagery via ArcGIS export/tiles. NAIP and EOX S2 Cloudless not yet implemented."},
    "labels_writer": {"file": "(missing)", "function": "(missing)", "schema": "labels.jsonl"},
    "rate_limiting": {"file": "addresses_to_satellite.py", "function": "time.sleep(args.delay_s)", "policy": "~1 req/sec", "user_agent": "entrypoint-maps/addresses_to_satellite (+email)"}
  },
  "external_calls": [
    {"name": "Nominatim", "where": "addresses_to_satellite.py:L120-L170", "url": "https://nominatim.openstreetmap.org/search"},
    {"name": "Nominatim", "where": "server.js:L629-L647", "url": "https://nominatim.openstreetmap.org/search"},
    {"name": "Overpass", "where": "server.js:L378-L396", "url": "https://overpass-api.de/api/interpreter"},
    {"name": "USGS_NAIP", "where": "(missing)", "url": "https://imagery.nationalmap.gov/arcgis/rest/services/NAIP/ImageServer/exportImage"},
    {"name": "EOX_S2_Cloudless", "where": "(missing)", "url": "https://tiles.maps.eox.at/wms?SERVICE=WMS&REQUEST=GetMap"}
  ],
  "artifacts": {
    "output_dir": "building_images/",
    "image_naming": "NNN_<sanitized-address>.png",
    "labels_file": "(missing)",
    "bbox_precision": {"decimal_places": 6, "reason": "~0.1m at Mercator meter bbox when converted to lon/lat for small extents"}
  },
  "found_code": [
    {"topic": "geocoding", "files": [
      {"path": "addresses_to_satellite.py", "lines": "L120-L186", "summary": "Nominatim /search with polygon_geojson=1; builds GeocodeResult with center, bbox from geojson or provider bbox."},
      {"path": "server.js", "lines": "L618-L673", "summary": "geocodeAddress() hits Nominatim (polygon_geojson=1) with Photon fallback; returns bbox and footprint."}
    ]},
    {"topic": "overpass", "files": [
      {"path": "server.js", "lines": "L378-L396", "summary": "Queries nearby highways via Overpass (around:150m) to project entrance; no building polygon query in Python batch."}
    ]},
    {"topic": "bbox_pad", "files": [
      {"path": "addresses_to_satellite.py", "lines": "L100-L116", "summary": "pad_bbox() inflates degrees by ratio; not in meters; no EPSG:3857 transform."}
    ]},
    {"topic": "projection", "files": [
      {"path": "src/satdist/distance.py", "lines": "L35-L66", "summary": "pixel_to_lonlat() and meters_per_pixel_at_center(); no pyproj/Shapely present."}
    ]},
    {"topic": "imagery", "files": [
      {"path": "src/satdist/fetch.py", "lines": "L1-L190", "summary": "Fetches Esri World_Imagery via ArcGIS export or tiles and stitches; saves PNG."},
      {"path": "src/satdist/map.py", "lines": "L1-L60", "summary": "Folium map with Esri World Imagery tiles and bbox rectangle."}
    ]},
    {"topic": "labels_io", "files": [
      {"path": "(missing)", "lines": "-", "summary": "No labels.jsonl aggregator; per-address JSON written next to images only."}
    ]}
  ],
  "gaps": [
    {"need": "USGS NAIP fetch", "status": "missing", "where_to_add": "src/satdist/fetch.py", "minimal_api": "exportImage", "notes": "Use NAIP ImageServer exportImage with WGS84 bbox and size to PNG; public domain imagery for US extents."},
    {"need": "EOX S2 WMS fetch", "status": "missing", "where_to_add": "src/satdist/fetch.py", "notes": "Implement WMS GetMap for 's2cloudless-2020' or latest layer; use EPSG:4326 bbox and requested width/height."},
    {"need": "10% padding in meters", "status": "missing", "where_to_add": "addresses_to_satellite.py (or new util)", "notes": "Compute polygon bbox in EPSG:3857, pad by 10% of width/height in meters, then convert back to WGS84."},
    {"need": "Building polygon via Overpass", "status": "missing", "where_to_add": "addresses_to_satellite.py", "notes": "Query nearest OSM building=* polygon around geocoded point; prefer polygon containing point; else nearest centroid."},
    {"need": "labels.jsonl writer", "status": "missing", "where_to_add": "addresses_to_satellite.py", "notes": "Append per-address record with schema: address, geocode, building polygon (WGS84), bbox_mercator, bbox_wgs84, imagery_source, image_path."},
    {"need": "polite throttling + UA", "status": "partial", "where_to_add": "addresses_to_satellite.py, src/satdist/fetch.py", "notes": "Batch geocoding throttled (1.1s); add same policy for Overpass; set deterministic UA strings for all external calls."}
  ],
  "suggested_diffs": [
    {
      "path": "src/satdist/fetch.py",
      "patch": "--- a/src/satdist/fetch.py\n+++ b/src/satdist/fetch.py\n@@\n+ # minimal, self-contained functions implementing public imagery\n+ NAIP_EXPORT_IMAGE = 'https://imagery.nationalmap.gov/arcgis/rest/services/NAIP/ImageServer/exportImage'\n+ EOX_WMS = 'https://tiles.maps.eox.at/wms'\n+ \n+ def save_usgs_naip(south, west, north, east, width, height, out_path):\n+     params = {\n+         'bbox': f"{west},{south},{east},{north}", 'bboxSR': '4326', 'size': f"{width},{height}",\n+         'imageSR': '3857', 'format': 'png', 'f': 'image'\n+     }\n+     url = NAIP_EXPORT_IMAGE + '?' + urllib.parse.urlencode(params)\n+     req = urllib.request.Request(url, headers={'User-Agent': 'entrypoint-maps/1.0'})\n+     with urllib.request.urlopen(req, timeout=30) as resp: open(out_path, 'wb').write(resp.read())\n+     return out_path\n+ \n+ def save_eox_s2_cloudless(south, west, north, east, width, height, out_path, layer='s2cloudless-2020'):\n+     params = {\n+         'SERVICE': 'WMS', 'REQUEST': 'GetMap', 'VERSION': '1.3.0', 'LAYERS': layer, 'CRS': 'EPSG:4326',\n+         'BBOX': f"{south},{west},{north},{east}", 'WIDTH': str(width), 'HEIGHT': str(height), 'FORMAT': 'image/png'\n+     }\n+     url = EOX_WMS + '?' + urllib.parse.urlencode(params)\n+     req = urllib.request.Request(url, headers={'User-Agent': 'entrypoint-maps/1.0'})\n+     with urllib.request.urlopen(req, timeout=30) as resp: open(out_path, 'wb').write(resp.read())\n+     return out_path\n",
      "reason": "Implement NAIP imagery export via ArcGIS ImageServer and EOX Sentinel-2 Cloudless WMS"
    },
    {
      "path": "addresses_to_satellite.py",
      "patch": "--- a/addresses_to_satellite.py\n+++ b/addresses_to_satellite.py\n@@\n+ def pad_bbox_mercator_from_poly(poly_ll, pad_ratio=0.10):\n+     """Project polygon lon/lat to EPSG:3857, pad bbox by ratio in meters, return bbox in both 3857 and 4326."""\n+     # placeholder: implement using math for Web Mercator forward/inverse without extra deps\n+     pass\n",
      "reason": "Consistent 10% padding in EPSG:3857"
    },
    {
      "path": "addresses_to_satellite.py",
      "patch": "--- a/addresses_to_satellite.py\n+++ b/addresses_to_satellite.py\n@@\n+ def overpass_building_polygon(lat, lon, radius_m=150, timeout_s=20):\n+     """Fetch nearest OSM building polygon containing the point; else nearest centroid."""\n+     pass\n",
      "reason": "Query OSM building polygons via Overpass for robust footprint"
    },
    {
      "path": "addresses_to_satellite.py",
      "patch": "--- a/addresses_to_satellite.py\n+++ b/addresses_to_satellite.py\n@@\n+ class LabelsWriter:\n+     def __init__(self, path): self.f = open(path, 'a', encoding='utf-8')\n+     def write(self, rec: dict): self.f.write(json.dumps(rec, ensure_ascii=False) + "\n")\n+     def close(self): self.f.close()\n",
      "reason": "Aggregate labels.jsonl as required by dataset schema"
    }
  ],
  "run_examples": [
    {"cmd": "python addresses_to_satellite.py --input addresses.txt --out-dir building_images --width 1024 --height 1024", "expect": "images + per-address JSON; later labels.jsonl"},
    {"cmd": "python -m satdist.cli fetch --south <s> --west <w> --north <n> --east <e> --width 1024 --height 1024", "expect": "PNG saved under config/cache/"},
    {"cmd": "pytest -q", "expect": "unit tests green"}
  ],
  "test_plan": [
    "Unit test: pixel/frac <-> lat/lon conversion against known bbox",
    "Integration: run 3 sample addresses (US + non-US) and verify imagery saved",
    "Contract: enforce 1 req/sec; set deterministic UA"
  ],
  "questions_for_user": [
    "Do you want only NAIP for US and EOX elsewhere, or a single global source?",
    "What output image size(s) do you want (e.g., 1024, 1536)?",
    "Keep labels.jsonl schema as specified, or add entrance placeholders now?"
  ]
}

